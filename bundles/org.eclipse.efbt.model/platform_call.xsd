<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:attribute_lineage="http://www.eclipse.org/attribute_lineage" xmlns:base_cube_data="http://www.eclipse.org/base_cube_data" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:functions="http://www.eclipse.org/functions" xmlns:module_management="http://www.eclipse.org/module_management" xmlns:platform_call="http://www.eclipse.org/platform_call" xmlns:reports="http://www.eclipse.org/reports" xmlns:transformation="http://www.eclipse.org/transformation" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="platform_call" ecore:package="platform_call" targetNamespace="http://www.eclipse.org/platform_call">
  <xsd:import namespace="http://www.eclipse.org/reports" schemaLocation="reports.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/functions" schemaLocation="functions.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/transformation" schemaLocation="transformation.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/module_management" schemaLocation="module_management.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/base_cube_data" schemaLocation="base_cube_data.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="../../org.eclipse.emf.ecore/model/Ecore.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/attribute_lineage" schemaLocation="attribute_lineage.xsd"/>
  <xsd:annotation>
    <xsd:documentation> This package describes platform calls . 
    Each Platform call  takes one or more instances of a model  and returns a model instance as a result.
 </xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:appinfo ecore:key="license" source="license">Copyright (c) 2020 Bird Software Solutions Ltd
 All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v20.html

SPDX-License-Identifier: EPL-2.0 

 Contributors:
 Neil Mackenzie - initial API and implementation&#13;</xsd:appinfo>
  </xsd:annotation>
  <xsd:element ecore:ignore="true" name="GetAttributeLineageForOneReportCell" type="platform_call:GetAttributeLineageForOneReportCell"/>
  <xsd:complexType name="CompareAttributeLineageModels">
    <xsd:annotation>
      <xsd:documentation>This is a PlatformCall which compares 2 AttributeModels</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="platform_call:PlatformCall">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="resultingModel" type="attribute_lineage:AttributeLineageModel">
            <xsd:annotation>
              <xsd:documentation>This is he resulting Attributemodel, it makes use of the isSubset field to say which items are inluded in both the first model and the second model</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="subsetBoolean" type="platform_call:SubsetBoolean">
            <xsd:annotation>
              <xsd:documentation>This field is used to state if the firt model is a subset of the second model or not.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="notIncludedModel" type="attribute_lineage:AttributeLineageModel"/>
        </xsd:sequence>
        <xsd:attribute ecore:reference="attribute_lineage:AttributeLineageModel" name="firstModel" type="xsd:anyURI"/>
        <xsd:attribute ecore:reference="attribute_lineage:AttributeLineageModel" name="secondModel" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IsNotSubset">
    <xsd:complexContent>
      <xsd:extension base="platform_call:SubsetBoolean"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IsSubset">
    <xsd:complexContent>
      <xsd:extension base="platform_call:SubsetBoolean"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SubsetBoolean"/>
  <xsd:complexType name="ExecuteAttributeLineageModel">
    <xsd:annotation>
      <xsd:documentation>A Platform call, which takes an AttributeLineageModel and creates a set of Scala files to execute that AttributeLineageModel. When it is run a number of Scla files will be available in the output directory specified by outputdir</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="platform_call:PlatformCall">
        <xsd:attribute ecore:reference="attribute_lineage:AttributeLineageModel" name="attributeLineageModel" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The executable AttributeLineageModel</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inputdir" type="ecore:EString">
          <xsd:annotation>
            <xsd:documentation>The input directory with all the models, required to gett all the details of the AttributeLineageModel</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="outputdir" type="ecore:EString">
          <xsd:annotation>
            <xsd:documentation>The output directory for generated code</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="base_cube_data:InputData" name="programInputs" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The program Inputs</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PlatformCall">
    <xsd:annotation>
      <xsd:documentation> A Platform Call </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="errorMessage" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>Any error message returned by the platform call</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:id="true" name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>The name of the platform call</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:unsettable="false" name="returnStatus" type="ecore:EInt">
      <xsd:annotation>
        <xsd:documentation>The return status of the platform call, 0 represents a sucessful execution.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="PlatformCallModule">
    <xsd:annotation>
      <xsd:documentation>A Module of PlatfromCalls</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="module_management:Module">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="platformCalls" type="platform_call:PlatformCall">
            <xsd:annotation>
              <xsd:documentation>The group of PlatformCalls</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GetAttributeLineageModel">
    <xsd:annotation>
      <xsd:documentation>A Platform call, which takes a VersionedComponentsSet as input and returns a program</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="platform_call:PlatformCall">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="resultingModel" type="attribute_lineage:AttributeLineageModel">
            <xsd:annotation>
              <xsd:documentation>The resulting program</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute ecore:reference="transformation:VersionedComponentsSet" name="transformationContext" type="xsd:anyURI">
          <xsd:annotation>
            <xsd:documentation>The VersionedComponentsSet</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute ecore:reference="functions:SpeculativeCubeColumnParameter" name="unresolvedCubeColumnParams">
          <xsd:annotation>
            <xsd:documentation>If the VersionedComponentsSet includes DataSetTranformation which contains SpeculativeCubeColumnParameter which cannot be resolved then we list them here</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleType>
            <xsd:list itemType="xsd:anyURI"/>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="GetAttributeLineageForOneReportCell">
    <xsd:complexContent>
      <xsd:extension base="platform_call:PlatformCall">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="resultingModel" type="attribute_lineage:AttributeLineageModel"/>
        </xsd:sequence>
        <xsd:attribute ecore:reference="transformation:VersionedComponentsSet" name="transformationContext" type="xsd:anyURI"/>
        <xsd:attribute ecore:reference="reports:ReportCell" name="reportCell" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
