// automatically generated by Xtext
grammar org.eclipse.efbt.aorta.Aorta with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/output_data_sets" 
import "http://www.eclipse.org/module_management" as module_management
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/deep_structures" as deep_structures
import "http://www.eclipse.org/requirements_artefacts" as requirements_artefacts
import "http://www.eclipse.org/scenarios" as scenarios
import "http://www.eclipse.org/requirements_text" as requirements_text
import "http://www.eclipse.org/test_input_data" as test_input_data
import "http://www.eclipse.org/base_column_structured_data" as base_column_structured_data
import "http://www.eclipse.org/test_worked_example" as test_worked_example
import "http://www.eclipse.org/data_lineage" as data_lineage
import "http://www.eclipse.org/technical_specification_breakdown" as technical_specification_breakdown
import "http://www.eclipse.org/functionality_module" as functionality_module
import "http://www.eclipse.org/test" as test
import "http://www.eclipse.org/report_structures" as report_structures
import "http://www.eclipse.org/column_structured_data" as column_structured_data
import "http://www.eclipse.org/test_definition" as test_definition
import "http://www.eclipse.org/execution_environments" as execution_environments
import "http://www.eclipse.org/aorta_program" as aorta_program
import "http://www.eclipse.org/column_structures" as column_structures
import "http://www.eclipse.org/output_data_structures" as output_data_structures
import "http://www.eclipse.org/aortafunctions" as aortafunctions
import "http://www.eclipse.org/cell_transformation_logic" as cell_transformation_logic
import "http://www.eclipse.org/input_data_structures" as input_data_structures
import "http://www.eclipse.org/dataset_based_functional_domain_breakdown" as dataset_based_functional_domain_breakdown
import "http://www.eclipse.org/report_based_report_based_functional_domain_breakdown" as report_based_report_based_functional_domain_breakdown

Program returns aorta_program::Program:
	{aorta_program::Program}
	'Program'
	'{'
		('domainModule' domainModule=ColumnDomainModule)?
		('requirements' requirements=RequirementsModule)?
		('input_structures' input_structures=ColumnStructureModule)?
		('reportStructures' reportStructures=RegReportModule)?
		('testDefinitions' testDefinitions=TestDefinitionModule)?
		('tests' tests=TestModule)?
		('requirementsArtefacts' requirementsArtefacts=InputTypeModule)?
		('testTemplates' testTemplates=TestTemplateModule)?
		('testConstriants' testConstriants=TestContraints)?
		('functionalityModules' functionalityModules=FunctionalityModuleModule)?
	'}';


















TestDefinition returns test_definition::TestDefinition:
	TestDefinition_Impl | E2ETestDefinition | UnitTestDefinition;






FunctionalityModule returns functionality_module::FunctionalityModule:
	DataProcessingFunctionalityModule | LeafFunctionalityModule_Impl | ParallelFunctionalityModule | ScenarioSetFunctionalityModule | SerialFunctionalityModule | FunctionalityModuleSet_Impl | ReadDataSourceFunctionalityModule | ValidationFunctionalityModule;





RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;














TestInputData returns test_input_data::TestInputData:
	TestInputData_Impl | TestColumnStructuredData | TestStrucuredFileData;

Result returns test::Result:
	Result_Impl | ReportCellResults | DataSetResults;






BaseCell returns base_column_structured_data::BaseCell:
	BaseCellWithEnumeratedValue | BaseCellWithValue;





ColumnDomainModule returns column_structures::ColumnDomainModule:
	{column_structures::ColumnDomainModule}
	'ColumnDomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('columnDomains' '{' columnDomains+=ColumnDomain ( "," columnDomains+=ColumnDomain)* '}' )?
	'}';

RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

ColumnStructureModule returns column_structures::ColumnStructureModule:
	{column_structures::ColumnStructureModule}
	'ColumnStructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('columnStructures' '{' columnStructures+=ColumnStructuredEntity ( "," columnStructures+=ColumnStructuredEntity)* '}' )?
	'}';

RegReportModule returns report_structures::RegReportModule:
	{report_structures::RegReportModule}
	'RegReportModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('reportGroups' '{' reportGroups+=ReportGroup ( "," reportGroups+=ReportGroup)* '}' )?
	'}';

TestDefinitionModule returns test_definition::TestDefinitionModule:
	{test_definition::TestDefinitionModule}
	'TestDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('testDefinitions' '{' testDefinitions+=TestDefinition ( "," testDefinitions+=TestDefinition)* '}' )?
	'}';

TestModule returns test::TestModule:
	{test::TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('executionEnvironment' executionEnvironment=[execution_environments::TestExecutionEnvironment|QualifiedName])?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=E2ETest ( "," tests+=E2ETest)* '}' )?
	'}';

InputTypeModule returns requirements_artefacts::InputTypeModule:
	{requirements_artefacts::InputTypeModule}
	'InputTypeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('inputTypes' '{' inputTypes+=InputType ( "," inputTypes+=InputType)* '}' )?
	'}';

TestTemplateModule returns test_definition::TestTemplateModule:
	{test_definition::TestTemplateModule}
	'TestTemplateModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('templates' '{' templates+=TestTemplate ( "," templates+=TestTemplate)* '}' )?
	'}';

TestContraints returns test_definition::TestContraints:
	{test_definition::TestContraints}
	'TestContraints'
	name=EString
	'{'
		('template' template=[test_definition::TestTemplate|QualifiedName])?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

FunctionalityModuleModule returns functionality_module::FunctionalityModuleModule:
	{functionality_module::FunctionalityModuleModule}
	'FunctionalityModuleModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('FunctionalityModules' '{' FunctionalityModules+=FunctionalityModule ( "," FunctionalityModules+=FunctionalityModule)* '}' )?
	'}';

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

ColumnDomain returns column_structures::ColumnDomain:
	{column_structures::ColumnDomain}
	(isEnumerated?='isEnumerated')?
	'ColumnDomain'
	name=EString
	'{'
		('enumMembers' '{' enumMembers+=EnumMember ( "," enumMembers+=EnumMember)* '}' )?
		('dataType' dataType=ColumnDataType)?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[module_management::Module|QualifiedName])?
		('longName' longName=[module_management::ModuleLongName|QualifiedName])?
	'}';

EnumMember returns column_structures::EnumMember:
	{column_structures::EnumMember}
	'EnumMember'
	name=EString
	'{'
		('code' code=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ColumnDataType returns column_structures::ColumnDataType:
	{column_structures::ColumnDataType}
	'ColumnDataType'
	name=EString;

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[requirements_text::RequirementsSectionLinkWithText|QualifiedName])?
		'requirementsType' requirementsType=[requirements_text::RequirementType|QualifiedName]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[requirements_text::TitledRequirementsSection|QualifiedName])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

ColumnStructuredEntity returns column_structures::ColumnStructuredEntity:
	{column_structures::ColumnStructuredEntity}
	'ColumnStructuredEntity'
	name=EString
	'{'
		('column' '{' column+=Column ( "," column+=Column)* '}' )?
	'}';

Column returns column_structures::Column:
	{column_structures::Column}
	(isIdentifier?='isIdentifier')?
	(isMandatory?='isMandatory')?
	'Column'
	name=EString
	'{'
		('domain' domain=[column_structures::ColumnDomain|QualifiedName])?
	'}';

ReportGroup returns report_structures::ReportGroup:
	{report_structures::ReportGroup}
	'ReportGroup'
	name=EString
	'{'
		('regReports' '{' regReports+=RegReport ( "," regReports+=RegReport)* '}' )?
	'}';

RegReport returns report_structures::RegReport:
	{report_structures::RegReport}
	'RegReport'
	name=EString
	'{'
		('cells' '{' cells+=RegReportCell ( "," cells+=RegReportCell)* '}' )?
		('rows' '{' rows+=RegReportRow ( "," rows+=RegReportRow)* '}' )?
		('columns' '{' columns+=RegReportColumn ( "," columns+=RegReportColumn)* '}' )?
	'}';

RegReportCell returns report_structures::RegReportCell:
	{report_structures::RegReportCell}
	'RegReportCell'
	name=EString;

RegReportRow returns report_structures::RegReportRow:
	{report_structures::RegReportRow}
	'RegReportRow'
	name=EString;

RegReportColumn returns report_structures::RegReportColumn:
	{report_structures::RegReportColumn}
	'RegReportColumn'
	name=EString;

TestDefinition_Impl returns test_definition::TestDefinition:
	{test_definition::TestDefinition}
	'TestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

Given returns test_definition::Given:
	{test_definition::Given}
	'Given'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

When returns test_definition::When:
	{test_definition::When}
	'When'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

Then returns test_definition::Then:
	{test_definition::Then}
	'Then'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

E2ETestDefinition returns test_definition::E2ETestDefinition:
	{test_definition::E2ETestDefinition}
	'E2ETestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

UnitTestDefinition returns test_definition::UnitTestDefinition:
	{test_definition::UnitTestDefinition}
	'UnitTestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

ClauseText returns test_definition::ClauseText:
	{test_definition::ClauseText}
	'ClauseText'
	name=EString;

Param returns test_definition::Param:
	{test_definition::Param}
	'Param'
	'{'
		('param' param=[ecore::EObject|QualifiedName])?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

E2ETest returns test::E2ETest:
	{test::E2ETest}
	'E2ETest'
	name=EString
	'{'
		('testDefinition' testDefinition=[test_definition::E2ETestDefinition|QualifiedName])?
		('inputData' inputData=TestInputData)?
		('expectedResults' expectedResults=Result)?
	'}';

TestExecutionEnvironment returns execution_environments::TestExecutionEnvironment:
	{execution_environments::TestExecutionEnvironment}
	'TestExecutionEnvironment'
	name=EString
	'{'
		('inputStructures' inputStructures=[input_data_structures::InputDatastructureModule|QualifiedName])?
		('outputStructuresModule' outputStructuresModule=[output_data_structures::OutputDataStructureModule|QualifiedName])?
	'}';

TestInputData_Impl returns test_input_data::TestInputData:
	{test_input_data::TestInputData}
	'TestInputData'
	name=EString;

Result_Impl returns test::Result:
	{test::Result}
	'Result'
	;

TestColumnStructuredData returns test_input_data::TestColumnStructuredData:
	{test_input_data::TestColumnStructuredData}
	'TestColumnStructuredData'
	name=EString
	'{'
		('sourceTableData' '{' sourceTableData+=BaseColumnStructuredData ( "," sourceTableData+=BaseColumnStructuredData)* '}' )?
	'}';

TestStrucuredFileData returns test_input_data::TestStrucuredFileData:
	{test_input_data::TestStrucuredFileData}
	'TestStrucuredFileData'
	name=EString
	'{'
		('testFileData' '{' testFileData+=StructuredFile ( "," testFileData+=StructuredFile)* '}' )?
	'}';

BaseColumnStructuredData returns base_column_structured_data::BaseColumnStructuredData:
	{base_column_structured_data::BaseColumnStructuredData}
	'BaseColumnStructuredData'
	name=EString
	'{'
		('cube' cube=[column_structures::ColumnStructuredEntity|QualifiedName])?
		('rows' '{' rows+=BaseRowData ( "," rows+=BaseRowData)* '}' )?
	'}';

BaseRowData returns base_column_structured_data::BaseRowData:
	{base_column_structured_data::BaseRowData}
	'BaseRowData'
	rowID=EString
	'{'
		('cells' '{' cells+=BaseCell ( "," cells+=BaseCell)* '}' )?
	'}';

BaseCellWithEnumeratedValue returns base_column_structured_data::BaseCellWithEnumeratedValue:
	{base_column_structured_data::BaseCellWithEnumeratedValue}
	'BaseCellWithEnumeratedValue'
	cellID=EString
	'{'
		('column' column=[column_structures::Column|QualifiedName])?
		('value' value=[column_structures::EnumMember|QualifiedName])?
	'}';

BaseCellWithValue returns base_column_structured_data::BaseCellWithValue:
	{base_column_structured_data::BaseCellWithValue}
	'BaseCellWithValue'
	cellID=EString
	'{'
		('value' value=EString)?
		('column' column=[column_structures::Column|QualifiedName])?
	'}';

StructuredFile returns test_input_data::StructuredFile:
	{test_input_data::StructuredFile}
	'StructuredFile'
	'{'
		('fileLocation' fileLocation=EString)?
	'}';

ReportCellResults returns test::ReportCellResults:
	{test::ReportCellResults}
	'ReportCellResults'
	'{'
		('reportCellValues' '{' reportCellValues+=RegReportCellValue ( "," reportCellValues+=RegReportCellValue)* '}' )?
	'}';

DataSetResults returns test::DataSetResults:
	{test::DataSetResults}
	'DataSetResults'
	'{'
		('expectedResults' '{' expectedResults+=ColumnStructuredData ( "," expectedResults+=ColumnStructuredData)* '}' )?
	'}';

RegReportCellValue returns report_structures::RegReportCellValue:
	{report_structures::RegReportCellValue}
	'RegReportCellValue'
	'{'
		('value' value=EString)?
		('cell' cell=[report_structures::RegReportCell|QualifiedName])?
	'}';

ColumnStructuredData returns column_structured_data::ColumnStructuredData:
	{column_structured_data::ColumnStructuredData}
	'ColumnStructuredData'
	name=EString;

InputDatastructureModule returns input_data_structures::InputDatastructureModule:
	{input_data_structures::InputDatastructureModule}
	'InputDatastructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

OutputDataStructureModule returns output_data_structures::OutputDataStructureModule:
	{output_data_structures::OutputDataStructureModule}
	'OutputDataStructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

InputType returns requirements_artefacts::InputType:
	{requirements_artefacts::InputType}
	'InputType'
	name=EString;

TestTemplate returns test_definition::TestTemplate:
	{test_definition::TestTemplate}
	'TestTemplate'
	name=EString
	'{'
		('givenText' givenText=ClauseText)?
		('whenText' whenText=ClauseText)?
		('thenText' thenText=ClauseText)?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

Scenario returns scenarios::Scenario:
	{scenarios::Scenario}
	'Scenario'
	name=EString;

ScenarioSet returns scenarios::ScenarioSet:
	{scenarios::ScenarioSet}
	'ScenarioSet'
	name=EString
	'{'
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

DataProcessingFunctionalityModule returns functionality_module::DataProcessingFunctionalityModule:
	{functionality_module::DataProcessingFunctionalityModule}
	'DataProcessingFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

LeafFunctionalityModule_Impl returns functionality_module::LeafFunctionalityModule:
	{functionality_module::LeafFunctionalityModule}
	'LeafFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ParallelFunctionalityModule returns functionality_module::ParallelFunctionalityModule:
	{functionality_module::ParallelFunctionalityModule}
	'ParallelFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ScenarioSetFunctionalityModule returns functionality_module::ScenarioSetFunctionalityModule:
	{functionality_module::ScenarioSetFunctionalityModule}
	'ScenarioSetFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
		('scenarioSetChoice' scenarioSetChoice=ScenarioSet)?
	'}';

SerialFunctionalityModule returns functionality_module::SerialFunctionalityModule:
	{functionality_module::SerialFunctionalityModule}
	'SerialFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

FunctionalityModuleSet_Impl returns functionality_module::FunctionalityModuleSet:
	{functionality_module::FunctionalityModuleSet}
	'FunctionalityModuleSet'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ReadDataSourceFunctionalityModule returns functionality_module::ReadDataSourceFunctionalityModule:
	{functionality_module::ReadDataSourceFunctionalityModule}
	'ReadDataSourceFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ValidationFunctionalityModule returns functionality_module::ValidationFunctionalityModule:
	{functionality_module::ValidationFunctionalityModule}
	'ValidationFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

	QualifiedName:
    ID ('.' ID)*;
