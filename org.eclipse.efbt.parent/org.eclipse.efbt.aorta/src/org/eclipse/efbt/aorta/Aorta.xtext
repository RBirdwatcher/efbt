// automatically generated by Xtext
grammar org.eclipse.efbt.aorta.Aorta with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/aorta_program" as aorta_program
import "http://www.eclipse.org/smcubes_model" as smcubes_model
import "http://www.eclipse.org/requirements_text" as requirements_text
import "http://www.eclipse.org/test_definition" as test_definition
import "http://www.eclipse.org/test" as test
import "http://www.eclipse.org/functionality_module" as functionality_module
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/base_column_structured_data" as base_column_structured_data
import "http://www.eclipse.org/reports" as reports
import "http://www.eclipse.org/efbt_data_definition" as efbt_data_definition
import "http://www.eclipse.org/efbt_mapping" as efbt_mapping
import "http://www.eclipse.org/data_definition" as data_definition
import "http://www.eclipse.org/mapping" as mapping
import "http://www.eclipse.org/efbt_vtl_transformation" as efbt_vtl_transformation
import "http://www.eclipse.org/scenarios" as scenarios
import "http://www.eclipse.org/module_management" as module_management
import "http://www.eclipse.org/core" as core
import "http://www.eclipse.org/test_input_data" as test_input_data
import "http://www.eclipse.org/vtl_transformation" as vtl_transformation


rogram returns aorta_program::Program:
	{aorta_program::Program}
	'Program'
	'{'
		('smCubesModel' smCubesModel=SmcubesModel)?
		('requirements' requirements=RequirementsModule)?
		('testDefinitions' testDefinitions=TestDefinitionModule)?
		('tests' tests=TestModule)?
		('testTemplates' testTemplates=TestTemplateModule)?
		('testConstriants' testConstriants=TestContraints)?
		('functionalityModules' functionalityModules=FunctionalityModuleModule)?
	'}';




















TestDefinition returns test_definition::TestDefinition:
	TestDefinition_Impl | E2ETestDefinition | UnitTestDefinition;




FunctionalityModule returns functionality_module::FunctionalityModule:
	DataProcessingFunctionalityModule | LeafFunctionalityModule_Impl | ParallelFunctionalityModule | ScenarioSetFunctionalityModule | SerialFunctionalityModule | FunctionalityModuleSet_Impl | ReadDataSourceFunctionalityModule | ValidationFunctionalityModule;























RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;













SmcubesModel returns smcubes_model::SmcubesModel:
	{smcubes_model::SmcubesModel}
	'SmcubesModel'
	name=EString
	'{'
		('domains' '{' domains+=DomainModule ( "," domains+=DomainModule)* '}' )?
		('members' '{' members+=MemberModule ( "," members+=MemberModule)* '}' )?
		('variables' '{' variables+=VariableModule ( "," variables+=VariableModule)* '}' )?
		('cubes' '{' cubes+=CubeModule ( "," cubes+=CubeModule)* '}' )?
		('combinations' '{' combinations+=CombinationModule ( "," combinations+=CombinationModule)* '}' )?
		('functionalModules' '{' functionalModules+=TransformationSchemeModule ( "," functionalModules+=TransformationSchemeModule)* '}' )?
		('mappings' '{' mappings+=MappingDefinitionModule ( "," mappings+=MappingDefinitionModule)* '}' )?
	'}';

RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

TestDefinitionModule returns test_definition::TestDefinitionModule:
	{test_definition::TestDefinitionModule}
	'TestDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('testDefinitions' '{' testDefinitions+=TestDefinition ( "," testDefinitions+=TestDefinition)* '}' )?
	'}';

TestModule returns test::TestModule:
	{test::TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=E2ETest ( "," tests+=E2ETest)* '}' )?
	'}';

TestTemplateModule returns test_definition::TestTemplateModule:
	{test_definition::TestTemplateModule}
	'TestTemplateModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('templates' '{' templates+=TestTemplate ( "," templates+=TestTemplate)* '}' )?
	'}';

TestContraints returns test_definition::TestContraints:
	{test_definition::TestContraints}
	'TestContraints'
	name=EString
	'{'
		('template' template=[test_definition::TestTemplate|QualifiedName])?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

FunctionalityModuleModule returns functionality_module::FunctionalityModuleModule:
	{functionality_module::FunctionalityModuleModule}
	'FunctionalityModuleModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('FunctionalityModules' '{' FunctionalityModules+=FunctionalityModule ( "," FunctionalityModules+=FunctionalityModule)* '}' )?
	'}';

DomainModule returns efbt_data_definition::DomainModule:
	{efbt_data_definition::DomainModule}
	'DomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('domains' '{' domains+=DOMAIN ( "," domains+=DOMAIN)* '}' )?
	'}';

MemberModule returns efbt_data_definition::MemberModule:
	{efbt_data_definition::MemberModule}
	'MemberModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('members' '{' members+=MEMBER ( "," members+=MEMBER)* '}' )?
	'}';

VariableModule returns efbt_data_definition::VariableModule:
	{efbt_data_definition::VariableModule}
	'VariableModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('variables' '{' variables+=VARIABLE ( "," variables+=VARIABLE)* '}' )?
	'}';

CubeModule returns efbt_data_definition::CubeModule:
	{efbt_data_definition::CubeModule}
	'CubeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('cubes' '{' cubes+=CUBE ( "," cubes+=CUBE)* '}' )?
		('cubeStructures' '{' cubeStructures+=CUBE_STRUCTURE ( "," cubeStructures+=CUBE_STRUCTURE)* '}' )?
		('cubeStructureItems' '{' cubeStructureItems+=CUBE_STRUCTURE_ITEM ( "," cubeStructureItems+=CUBE_STRUCTURE_ITEM)* '}' )?
	'}';

CombinationModule returns efbt_data_definition::CombinationModule:
	{efbt_data_definition::CombinationModule}
	'CombinationModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('combinations' '{' combinations+=COMBINATION ( "," combinations+=COMBINATION)* '}' )?
		('combination_items' '{' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* '}' )?
		('cubeToCombinationLinks' '{' cubeToCombinationLinks+=CUBE_TO_COMBINATION ( "," cubeToCombinationLinks+=CUBE_TO_COMBINATION)* '}' )?
	'}';

TransformationSchemeModule returns efbt_vtl_transformation::TransformationSchemeModule:
	{efbt_vtl_transformation::TransformationSchemeModule}
	'TransformationSchemeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('schemes' '{' schemes+=TRANSFORMATION_SCHEME ( "," schemes+=TRANSFORMATION_SCHEME)* '}' )?
	'}';

MappingDefinitionModule returns efbt_mapping::MappingDefinitionModule:
	{efbt_mapping::MappingDefinitionModule}
	'MappingDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('mappings' '{' mappings+=MAPPING_DEFINITION ( "," mappings+=MAPPING_DEFINITION)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

DOMAIN returns core::DOMAIN:
	{core::DOMAIN}
	(is_enumerated?='is_enumerated')?
	(is_reference?='is_reference')?
	'DOMAIN'
	name=EString
	'{'
		('code' code=EString)?
		('data_type' data_type=FACET_VALUE_TYPE)?
		('description' description=EString)?
		('domain_id' domain_id=EString)?
		('facet_id' facet_id=[core::FACET_COLLECTION|QualifiedName])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[module_management::Module|QualifiedName])?
		('longName' longName=[module_management::ModuleLongName|QualifiedName])?
	'}';

enum FACET_VALUE_TYPE returns core::FACET_VALUE_TYPE:
				BigInteger = 'BigInteger' | Boolean = 'Boolean' | DateTime = 'DateTime' | DayMonthDayMonth = 'DayMonthDayMonth' | Decimal = 'Decimal' | Double = 'Double' | Duration = 'Duration' | Float = 'Float' | GregorianDay = 'GregorianDay' | GregorianMonth = 'GregorianMonth' | GregorianYear = 'GregorianYear' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | String = 'String' | Time = 'Time' | URI = 'URI';

FACET_COLLECTION returns core::FACET_COLLECTION:
	{core::FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString
	'{'
		('code' code=EString)?
		('facet_value_type' facet_value_type=FACET_VALUE_TYPE)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::FACET_COLLECTION|QualifiedName])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MAINTENANCE_AGENCY returns core::MAINTENANCE_AGENCY:
	{core::MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString
	'{'
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
	'}';

MEMBER returns core::MEMBER:
	{core::MEMBER}
	'MEMBER'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_id' member_id=EString)?
		('domain_id' domain_id=[core::DOMAIN|QualifiedName])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

VARIABLE returns core::VARIABLE:
	{core::VARIABLE}
	'VARIABLE'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('primary_concept' primary_concept=EString)?
		('variable_id' variable_id=EString)?
		('domain_id' domain_id=[core::DOMAIN|QualifiedName])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

CUBE returns data_definition::CUBE:
	{data_definition::CUBE}
	(is_allowed?='is_allowed')?
	(published?='published')?
	'CUBE'
	cube_id=EString
	'{'
		('code' code=EString)?
		('cube_type' cube_type=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('cube_structure_id' cube_structure_id=[data_definition::CUBE_STRUCTURE|QualifiedName])?
		('framework_id' framework_id=[data_definition::FRAMEWORK|QualifiedName])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

CUBE_STRUCTURE returns data_definition::CUBE_STRUCTURE:
	{data_definition::CUBE_STRUCTURE}
	'CUBE_STRUCTURE'
	cube_structure_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

CUBE_STRUCTURE_ITEM returns data_definition::CUBE_STRUCTURE_ITEM:
	{data_definition::CUBE_STRUCTURE_ITEM}
	(is_flow?='is_flow')?
	(is_mandatory?='is_mandatory')?
	(isIdentifier?='isIdentifier')?
	'CUBE_STRUCTURE_ITEM'
	'{'
		('description' description=EString)?
		('dimension_type' dimension_type=TYP_DMNSN)?
		('order' order=EInt)?
		('role' role=TYP_RL)?
		('cube_variable_code' cube_variable_code=EString)?
		('attribute_associated_variable' attribute_associated_variable=[core::VARIABLE|QualifiedName])?
		('cube_structure_id' cube_structure_id=[data_definition::CUBE_STRUCTURE|QualifiedName])?
		('member_id' member_id=[core::MEMBER|QualifiedName])?
		('subdomain_id' subdomain_id=[core::SUBDOMAIN|QualifiedName])?
		('variable_id' variable_id=[core::VARIABLE|QualifiedName])?
		('variable_set_id' variable_set_id=[core::VARIABLE_SET|QualifiedName])?
	'}';

FRAMEWORK returns data_definition::FRAMEWORK:
	{data_definition::FRAMEWORK}
	'FRAMEWORK'
	framework_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

enum TYP_DMNSN returns data_definition::TYP_DMNSN:
				B = 'B' | M = 'M' | T = 'T' | U = 'U';

EInt returns ecore::EInt:
	'-'? INT;

enum TYP_RL returns data_definition::TYP_RL:
				O = 'O' | A = 'A' | D = 'D';

SUBDOMAIN returns core::SUBDOMAIN:
	{core::SUBDOMAIN}
	(is_listed?='is_listed')?
	(is_natural?='is_natural')?
	'SUBDOMAIN'
	subdomain_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('domain_id' domain_id=[core::DOMAIN|QualifiedName])?
		('facet_id' facet_id=[core::FACET_COLLECTION|QualifiedName])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

VARIABLE_SET returns core::VARIABLE_SET:
	{core::VARIABLE_SET}
	'VARIABLE_SET'
	variable_set_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
	'}';

COMBINATION returns data_definition::COMBINATION:
	{data_definition::COMBINATION}
	'COMBINATION'
	combination_id=EString
	'{'
		('code' code=EString)?
		('name' name=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|QualifiedName])?
		('combination_items' '{' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* '}' )?
	'}';

COMBINATION_ITEM returns data_definition::COMBINATION_ITEM:
	{data_definition::COMBINATION_ITEM}
	'COMBINATION_ITEM'
	'{'
		('member_id' member_id=[core::MEMBER|QualifiedName])?
		('subdomain_id' subdomain_id=[core::SUBDOMAIN|QualifiedName])?
		('variable_id' variable_id=[core::VARIABLE|QualifiedName])?
		('variable_set_id' variable_set_id=[core::VARIABLE_SET|QualifiedName])?
	'}';

CUBE_TO_COMBINATION returns data_definition::CUBE_TO_COMBINATION:
	{data_definition::CUBE_TO_COMBINATION}
	'CUBE_TO_COMBINATION'
	'{'
		('combination_id' combination_id=[data_definition::COMBINATION|QualifiedName])?
		('cube_id' cube_id=[data_definition::CUBE|QualifiedName])?
	'}';

TRANSFORMATION_SCHEME returns vtl_transformation::TRANSFORMATION_SCHEME:
	{vtl_transformation::TRANSFORMATION_SCHEME}
	'TRANSFORMATION_SCHEME'
	transformation_scheme_id=EString
	'{'
		('description' description=EString)?
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('version' version=EString)?
		('valid_to' valid_to=EDate)?
		('valid_from' valid_from=EDate)?
	'}';

MAPPING_DEFINITION returns mapping::MAPPING_DEFINITION:
	{mapping::MAPPING_DEFINITION}
	'MAPPING_DEFINITION'
	mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('mapping_type' mapping_type=EString)?
		('memberMapping' memberMapping=[mapping::MEMBER_MAPPING|QualifiedName])?
		('variableMapping' variableMapping=[mapping::VARIABLE_MAPPING|QualifiedName])?
	'}';

MEMBER_MAPPING returns mapping::MEMBER_MAPPING:
	{mapping::MEMBER_MAPPING}
	'MEMBER_MAPPING'
	member_mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('memberMappingItems' '{' memberMappingItems+=MEMBER_MAPPING_ITEM ( "," memberMappingItems+=MEMBER_MAPPING_ITEM)* '}' )?
	'}';

VARIABLE_MAPPING returns mapping::VARIABLE_MAPPING:
	{mapping::VARIABLE_MAPPING}
	'VARIABLE_MAPPING'
	variable_mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('varaibleMappingItems' '{' varaibleMappingItems+=VARIABLE_MAPPING_ITEM ( "," varaibleMappingItems+=VARIABLE_MAPPING_ITEM)* '}' )?
	'}';

MEMBER_MAPPING_ITEM returns mapping::MEMBER_MAPPING_ITEM:
	{mapping::MEMBER_MAPPING_ITEM}
	'MEMBER_MAPPING_ITEM'
	'{'
		('isSource' isSource=EString)?
		('member' member=[core::MEMBER|QualifiedName])?
		('variable' variable=[core::VARIABLE|QualifiedName])?
	'}';

VARIABLE_MAPPING_ITEM returns mapping::VARIABLE_MAPPING_ITEM:
	{mapping::VARIABLE_MAPPING_ITEM}
	'VARIABLE_MAPPING_ITEM'
	'{'
		('isSource' isSource=EString)?
		('variable' variable=[core::VARIABLE|QualifiedName])?
	'}';

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[requirements_text::RequirementsSectionLinkWithText|QualifiedName])?
		'requirementsType' requirementsType=[requirements_text::RequirementType|QualifiedName]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[requirements_text::TitledRequirementsSection|QualifiedName])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

TestDefinition_Impl returns test_definition::TestDefinition:
	{test_definition::TestDefinition}
	'TestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

Given returns test_definition::Given:
	{test_definition::Given}
	'Given'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

When returns test_definition::When:
	{test_definition::When}
	'When'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

Then returns test_definition::Then:
	{test_definition::Then}
	'Then'
	'{'
		('text' text=[test_definition::ClauseText|QualifiedName])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

E2ETestDefinition returns test_definition::E2ETestDefinition:
	{test_definition::E2ETestDefinition}
	'E2ETestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

UnitTestDefinition returns test_definition::UnitTestDefinition:
	{test_definition::UnitTestDefinition}
	'UnitTestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|QualifiedName])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

ClauseText returns test_definition::ClauseText:
	{test_definition::ClauseText}
	'ClauseText'
	name=EString;

Param returns test_definition::Param:
	{test_definition::Param}
	'Param'
	'{'
		('param' param=[ecore::EObject|QualifiedName])?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

E2ETest returns test::E2ETest:
	{test::E2ETest}
	'E2ETest'
	name=EString
	'{'
		('testDefinition' testDefinition=[test_definition::E2ETestDefinition|QualifiedName])?
		('inputData' inputData=TestInputData)?
		('expectedResults' expectedResults=Result)?
	'}';

TestInputData returns test_input_data::TestInputData:
	{test_input_data::TestInputData}
	'TestInputData'
	name=EString;

Result returns test::Result:
	{test::Result}
	'Result'
	;

TestTemplate returns test_definition::TestTemplate:
	{test_definition::TestTemplate}
	'TestTemplate'
	name=EString
	'{'
		('givenText' givenText=ClauseText)?
		('whenText' whenText=ClauseText)?
		('thenText' thenText=ClauseText)?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

Scenario returns scenarios::Scenario:
	{scenarios::Scenario}
	'Scenario'
	name=EString;

ScenarioSet returns scenarios::ScenarioSet:
	{scenarios::ScenarioSet}
	'ScenarioSet'
	name=EString
	'{'
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

DataProcessingFunctionalityModule returns functionality_module::DataProcessingFunctionalityModule:
	{functionality_module::DataProcessingFunctionalityModule}
	'DataProcessingFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

LeafFunctionalityModule_Impl returns functionality_module::LeafFunctionalityModule:
	{functionality_module::LeafFunctionalityModule}
	'LeafFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ParallelFunctionalityModule returns functionality_module::ParallelFunctionalityModule:
	{functionality_module::ParallelFunctionalityModule}
	'ParallelFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ScenarioSetFunctionalityModule returns functionality_module::ScenarioSetFunctionalityModule:
	{functionality_module::ScenarioSetFunctionalityModule}
	'ScenarioSetFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
		('scenarioSetChoice' scenarioSetChoice=ScenarioSet)?
	'}';

SerialFunctionalityModule returns functionality_module::SerialFunctionalityModule:
	{functionality_module::SerialFunctionalityModule}
	'SerialFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

FunctionalityModuleSet_Impl returns functionality_module::FunctionalityModuleSet:
	{functionality_module::FunctionalityModuleSet}
	'FunctionalityModuleSet'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ReadDataSourceFunctionalityModule returns functionality_module::ReadDataSourceFunctionalityModule:
	{functionality_module::ReadDataSourceFunctionalityModule}
	'ReadDataSourceFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ValidationFunctionalityModule returns functionality_module::ValidationFunctionalityModule:
	{functionality_module::ValidationFunctionalityModule}
	'ValidationFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|QualifiedName])?
		('scenario' scenario=[scenarios::Scenario|QualifiedName])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';
	
	

	QualifiedName:
    ID ('.' ID)*;

