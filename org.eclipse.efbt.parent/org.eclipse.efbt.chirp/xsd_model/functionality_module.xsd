<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:functionality_module="http://www.eclipse.org/functionality_module" xmlns:module_management="http://www.eclipse.org/module_management" xmlns:requirements_text="http://www.eclipse.org/requirements_text" xmlns:scenarios="http://www.eclipse.org/scenarios" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="functionality_module" ecore:package="org.eclipse.efbt.chirp.functionality_module" targetNamespace="http://www.eclipse.org/functionality_module">
  <xsd:import namespace="http://www.eclipse.org/requirements_text" schemaLocation="requirements_text.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/module_management" schemaLocation="module_management.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="Ecore.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/scenarios" schemaLocation="scenarios.xsd"/>
  <xsd:element ecore:ignore="true" name="DataProcessingFunctionalityModule" type="functionality_module:DataProcessingFunctionalityModule"/>
  <xsd:element ecore:ignore="true" name="FunctionalityModuleTag" type="functionality_module:FunctionalityModuleTag"/>
  <xsd:element ecore:ignore="true" name="ValidationFunctionalityModule" type="functionality_module:ValidationFunctionalityModule"/>
  <xsd:complexType name="DataProcessingFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A DataSetTransformationFunctionalityModule is a set of releted DataSetTransformations.
Usually they will be groups where the derived cube associated with DataSetTransformation, has source cubes which are associated with other DataSetTransformations in the same group.
</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:LeafFunctionalityModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LeafFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A  LeafFunctionalityModule is a FunctionalityModule which does not contain any sub FunctionalityModules</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:FunctionalityModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ParallelFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalityModuleSet, where the sub FunctionalityModules can be run in parallel , or ain any order, since there is no dependency between them whereby one needs to run before another.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:FunctionalityModuleSet"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ScenarioSetFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalityModuleSet whereby it is possible that ony some of the sub Transformation Schemes are executed for a test, dependant upon the Scenarios that are associated with the Test.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:FunctionalityModuleSet">
        <xsd:sequence>
          <xsd:element ecore:name="scenarioSetChoice" ecore:resolveProxies="true" minOccurs="0" name="scenarioSet" type="scenarios:ScenarioSet">
            <xsd:annotation>
              <xsd:documentation>The associated  ScenarioSet</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SerialFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalityModuleSet, where the sub FunctionalityModules are an ordered set which must be executed in order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:FunctionalityModuleSet"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FunctionalityModuleSet">
    <xsd:annotation>
      <xsd:documentation>A set of FunctionalityModules.
Note that FunctionalityModulesSet is also a subclass of FunctionalityModule, so the set can also include FunctionalityModulesSets</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:FunctionalityModule">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="subTransformationsAndSchemes" type="functionality_module:FunctionalityModule">
            <xsd:annotation>
              <xsd:documentation>The  contained set FunctionalityModules </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadDataSourceFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalityModule which represents the reading in data from base cubes. Note that the BIRD input layer is made up of BaseCubes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:LeafFunctionalityModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" ecore:interface="true" ecore:name="OutputCreationFunctionalityModule" name="ReportCellCreationFunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalityModule which represents the calculation of report cells.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functionality_module:LeafFunctionalityModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType abstract="true" name="FunctionalityModule">
    <xsd:annotation>
      <xsd:documentation>FunctionalityModule is the super class of ReportCellFunctionalityModule,ReadDataSourceFunctionalityModule, and DataSetTransformationFunctionalityModule.
It represents a set of processing.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:resolveProxies="true" minOccurs="0" name="scenarioSet" type="scenarios:ScenarioSet">
        <xsd:annotation>
          <xsd:documentation>Any ScenarioSets associated with the Transformation or FunctionalityModule. 
The individual Scenarios in such a ScenarioSet are associated with different behaviour in the FunctionalityModule that we would like to test seperately. 
Scenarios can themsleves be linked to parts of the regulatory rulebook, allowing an annotation of the behaviour we wish to test.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute ecore:id="true" name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>The name of the FunctionalityModule</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:reference="functionality_module:FunctionalityModule" name="usedTransformationOrScheme" type="xsd:anyURI"/>
    <xsd:attribute ecore:reference="scenarios:Scenario" name="scenario" type="xsd:anyURI"/>
  </xsd:complexType>
  <xsd:complexType name="FunctionalityModuleModule">
    <xsd:annotation>
      <xsd:documentation>A module of FunctionalityModules</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="module_management:Module">
        <xsd:sequence>
          <xsd:element ecore:name="FunctionalityModules" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="FunctionalityModules" type="functionality_module:FunctionalityModule">
            <xsd:annotation>
              <xsd:documentation>The  set of FunctionalityModules </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FunctionalityModuleTag">
    <xsd:complexContent>
      <xsd:extension base="requirements_text:Tag">
        <xsd:attribute ecore:name="FunctionalityModule" ecore:reference="functionality_module:FunctionalityModule" name="FunctionalityModule" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ValidationFunctionalityModule">
    <xsd:complexContent>
      <xsd:extension base="functionality_module:LeafFunctionalityModule"/>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
